public void mystery1(int n) {
    if (n <= 1) {
        System.out.print(n);
    } else {
        mystery1(n / 2);
        System.out.print(", " + n);
    }
}

mystery1(1);   => 1
mystery1(4);   => 1, 2, 4
mystery1(16);  => 1, 2, 4, 8, 16
mystery1(30);  => 1, 3, 7, 15, 30
mystery1(100); => 1, 3, 6, 12, 25, 50, 100


██████████████████████████████████████████████████████████████████████████████████████████
public void mystery2(int n) {
    if (n > 100) {
        System.out.print(n);
    } else {
        mystery2(2 * n);
        System.out.print(", " + n);
    }
}

mystery2(113); => 113
mystery2(70);  => 140, 70
mystery2(42);  => 168, 84, 42
mystery2(30);  => 120, 60, 30
mystery2(10);  => 160, 80, 40, 20, 10


██████████████████████████████████████████████████████████████████████████████████████████
public void mystery3(int n) {
    if (n <= 0) {
        System.out.print("*");
    } else if (n % 2 == 0) {
        System.out.print("(");
        mystery3(n - 1);
        System.out.print(")");
    } else {
        System.out.print("[");
        mystery3(n - 1);
        System.out.print("]");
    }
}

mystery3(0); => *
mystery3(1); => [*]
mystery3(2); => ([*])
mystery3(4); => ([([*])])
mystery3(5); => [([([*])])]


██████████████████████████████████████████████████████████████████████████████████████████
public void mysteryXY(int x, int y) {
    if (y == 1) {
        System.out.print(x);
    } else {
        System.out.print(x * y + ", ");
        mysteryXY(x, y - 1);
        System.out.print(", " + x * y);
    }
}

mysteryXY(4, 1); => 4
mysteryXY(4, 2); => 8, 4, 8
mysteryXY(8, 2); => 16, 8, 16
mysteryXY(4, 3); => 12, 8, 4, 8, 12
mysteryXY(3, 4); => 12, 9, 6, 3, 6, 9, 12


██████████████████████████████████████████████████████████████████████████████████████████
public int mystery4(int x, int y) {
    if (x < y) {
        return x;
    } else {
        return mystery4(x - y, y);
    }
}

m(6, 13) -> 6

m(14, 10) -> m(4, 10)
  m(4, 10) -> 4
m(14, 10) -> 4

m(37, 10) -> m(27, 10)
  m(27, 10) -> m(17, 10)
    m(17, 10) -> m(7, 10)
      m(7, 10) -> 7
    m(17, 10) -> 7
  m(27, 10) -> 7
m(37, 10) -> 7

m(8, 2) -> m(6, 2)
  m(6, 2) -> m(4, 2)
    m(4, 2) -> m(2, 2)
      m(2, 2) -> m(0, 2)
        m(0, 2) -> 0
      m(2, 2) -> 0
    m(4, 2) -> 0
  m(6, 2) -> 0
m(8, 2) -> 0

m(50, 7) -> m(43, 7)
  m(43, 7) -> m(36, 7)
    m(36, 7) -> m(28, 7)
      m(29, 7) -> m(22, 7)
        m(22, 7) -> m(15, 7)
          m(15, 7) -> m(8, 7)
            m(8, 7) -> m(1, 7)
              m(1, 7) -> 1
          m(8, 7) -> 1
        m(22, 7) -> 1
      m(29, 7) -> 1
    m(36, 7) -> 1
  m(43, 7) -> 1
m(50, 7) -> 1


██████████████████████████████████████████████████████████████████████████████████████████
public int mystery5(int x, int y) {
    if (x < 0) {
        return -mystery5(-x, y);
    } else if (y < 0) {
        return -mystery5(x, -y);
    } else if (x == 0 && y == 0) {
        return 0;
    } else {
        return 100 * mystery5(x / 10, y / 10) + 10 * (x % 10) + y % 10;
    }
}

m(5, 7) -> 100 * m(0, 0) + 10 * 5 + 7
  m(0, 0) -> 0
m(5, 7) -> 100 * 0 + 10 * 5 + 7 = 57

m(12, 9) -> 100 * m(1, 0) + 10 * 2 + 9
  m(1, 0) -> 100 * m(0, 0) + 10 * 1 + 0
    m(0, 0) -> 0
  m(1, 0) -> 100 * 0 + 10 * 1 + 0 = 10
m(12, 9) -> 100 * 10 + 10 * 2 + 9 = 1029

m(-7, 4) -> -m(7, 4)
  m(7, 4) -> 100 * m(0, 0) + 10 * 7 + 4
    m(0, 0) -> 0
  m(7, 4) -> 100 * 0 + 10 * 7 + 4 = 74
m(-7, 4) -> -74

m(-23, -48) -> -m(23, -48)
  m(23, -48) -> -m(23, 48)
    m(23, 48) -> 100 * m(2, 4) + 10 * 3 + 8
      m(2, 4) -> 100 * m(0, 0) + 10 * 2 + 4
        m(0, 0) -> 0
      m(2, 4) -> 100 * 0 + 10 * 2 + 4 = 24
    m(23, 48) -> 100 * 24 + 10 * 3 + 8 = 2438
  m(23, -48) -> -2438
m(-23, -48) -> -(-2438) = 2438

m(128, 343) -> 100 * m(12, 34) + 10 * 8 + 3
  m(12, 34) -> 100 * m(1, 3) + 10 * 2 + 4
    m(1, 3) -> 100 * m(0, 0) + 10 * 1 + 3
      m(0, 0) -> 0
    m(1, 3) -> 100 * 0 + 10 * 1 + 3 = 13
  m(12, 34) -> 100 * 13 + 10 * 2 + 4 = 1324
m(128, 343) -> 100 * 1324 + 10 * 8 + 3 = 132483


██████████████████████████████████████████████████████████████████████████████████████████
public static int mystery6(int n, int k) {
    if (k == 0 || k == n) {
        return 1;
    } else if (k > n) {
        return 0;
    } else {
        return mystery6(n - 1, k - 1) + mystery6(n - 1, k);
    }
}

m(7, 1) -> m(6, 0) + m(6, 1)
  m(6, 0) -> 1
  m(6, 1) -> m(5, 0) + m(5, 1)
    m(5, 0) -> 1
    m(5, 1) -> m(4, 0) + m(4, 1)
      m(4, 0) -> 1
      m(4, 1) -> m(3, 0) + m(3, 1)
        m(3, 0) -> 1
        m(3, 1) -> m(2, 0) + m(2, 1)
          m(2, 0) -> 1
          m(2, 1) -> m(1, 0) + m(1, 1)
            m(1, 0) -> 1
            m(1, 1) -> 1
          m(2, 1) -> 1 + 1 = 2
        m(3, 1) -> 1 + 2 = 3
      m(4, 1) -> 1 + 3 = 4
    m(5, 1) -> 1 + 4 = 5
  m(6, 1) -> 1 + 5 = 6
m(7, 1) -> 1 + 6 = 7

m(4, 2) -> m(3, 1) + m(3, 2)
  m(3, 1) -> m(2, 0) + m(2, 1)
    m(2, 0) -> 1
    m(2, 1) -> m(1, 0) + m(1, 1)
      m(1, 0) -> 1
      m(1, 1) -> 1
    m(2, 1) -> 1 + 1 = 2
  m(3, 1) -> 1 + 2 = 3
  m(3, 2) -> m(2, 1) + m(2, 2)
    m(2, 1) -> m(1, 0) + m(1, 1)
      m(1, 0) -> 1
      m(1, 1) -> 1
    m(2, 1) -> 1 + 1 = 2
    m(2, 2) -> 1
  m(3, 2) -> 2 + 1 = 3
m(4, 2) -> 3 + 3 = 6

m(4, 3) -> m(3, 2) + m(3, 3)
  m(3, 2) -> m(2, 1) + m(2, 2)
    m(2, 1) -> m(1, 0) + m(1, 1)
      m(1, 0) -> 1
      m(1, 1) -> 1
    m(2, 1) -> 1 + 1 = 2
    m(2, 2) -> 1
  m(3, 2) -> 2 + 1 = 3
  m(3, 3) -> 1
m(4, 3) -> 3 + 1 = 4

m(5, 3) -> m(4, 2) + m(4, 3)
  m(4, 2) -> m(3, 1) + m(3, 2)
    m(3, 1) -> m(2, 0) + m(2, 1)
      m(2, 0) -> 1
      m(2, 1) -> m(1, 0) + m(1, 1)
        m(1, 0) -> 1
        m(1, 1) -> 1
      m(2, 1) -> 1 + 1 = 2
    m(3, 1) -> 1 + 2 = 3
    m(3, 2) -> m(2, 1) + m(2, 2)
      m(2, 1) -> m(1, 0) + m(1, 1)
        m(1, 0) -> 1
        m(1, 1) -> 1
      m(2, 1) -> 1 + 1 = 2
      m(2, 2) -> 1
    m(3, 2) -> 2 + 1 = 3
  m(4, 2) -> 3 + 3 = 6
  m(4, 3) -> m(3, 2) + m(3, 3)
    m(3, 2) -> m(2, 1) + m(2, 2)
      m(2, 1) -> m(1, 0) + m(1, 1)
        m(1, 0) -> 1
        m(1, 1) -> 1
      m(2, 1) -> 1 + 1 = 2
      m(2, 2) -> 1
    m(3, 2) -> 2 + 1 = 3
    m(3, 3) -> 1
  m(4, 3) -> 3 + 1 = 4
m(5, 3) -> 6 + 4 = 10

m(5, 4) -> m(4, 3) + m(4, 4)
  m(4, 3) -> m(3, 2) + m(3, 3)
    m(3, 2) -> m(2, 1) + m(2, 2)
      m(2, 1) -> m(1, 0) + m(1, 1)
        m(1, 0) -> 1
        m(1, 1) -> 1
      m(2, 1) -> 1 + 1 = 2
      m(2, 2) -> 1
    m(3, 2) -> 2 + 1 = 3
    m(3, 3) -> 1
  m(4, 3) -> 3 + 1 = 4
  m(4, 4) -> 1
m(5, 4) 4 + 1 = 5
