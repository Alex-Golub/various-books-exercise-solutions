public void mystery1(int n) {
    if (n <= 1) {
        System.out.print(n);
    } else {
        mystery1(n / 2);
        System.out.print(", " + n);
    }
}

mystery1(1);   => 1
mystery1(4);   => 1 = 2 = 4
mystery1(16);  => 1 = 2 = 4 = 8 = 16
mystery1(30);  => 1 = 3 = 7 = 15 = 30
mystery1(100); => 1 = 3 = 6 = 12 = 25 = 50 = 100


██████████████████████████████████████████████████████████████████████████████████████████
public static int recursionMystery9(int x, int y) {
    if (x < 0) {
        return -recursionMystery9(-x, y);
    } else if (y < 0) {
        return -recursionMystery9(x, -y);
    } else if (x == 0 && y == 0) {
        return 0;
    } else {
        return 100 * recursionMystery9(x / 10, y / 10) + 10 * (x % 10) + y % 10;
    }
}


m(12, 49) -> 100 * m(1, 4) + 10 * 2 + 9
  m(1, 4) -> 100 * m(0, 0) + 10 * 1 + 4
    m(0, 0) -> 0
  m(1, 4) -> 100 * 0 + 10 * 1 + 4 = 14
m(12, 49) -> 100 * 14 + 10 * 2 + 9 = 1429

m(73, -8) -> -m(73, 8)
  m(73, 8) -> 100 * m(7, 0) + 10 * 3 + 8
    m(7, 0) -> 100 * m(0, 0) + 10 * 7 + 0
      m(0, 0) -> 0
    m(7, 0) -> 100 * 0 + 10 * 7 + 0 = 70
  m(73, 8) -> 100 * 70 + 10 * 3 + 8 = 7038
m(73, -8) -> -7038

m(-248, -3795) -> -m(248, -3795)
  m(248, -3795) -> -m(248, 3795)
    m(248, 3795) -> 100 * m(24, 379) + 10 * 8 + 5
      m(24, 379) -> 100 * m(2, 37) + 10 * 2 + 9
        m(2, 37) -> 100 * m(0, 3) + 10 * 2 + 7
          m(0, 3) -> 100 * m(0, 0) + 10 * 0 + 3
            m(0, 0) -> 0
          m(0, 3) -> 100 * 0 + 10 * 0 + 3 = 3
        m(2, 37) -> 100 * 3 + 10 * 2 + 7 = 327
      m(24, 379) -> 100 * 327 + 10 * 2 + 9 = 32739
    m(248, 3795) -> 100 * 32739 + 10 * 8 + 5 = 3273985
  m(248, -3795) -> -3273985
m(-248, -3795) -> -(-3273985) = 3273985


██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery10(int x) {
    System.out.print(x + " ");
    if (x <= 1) {
        System.out.print("END ");
    } else if (x % 2 == 0) {
        recursionMystery10(x / 2);
        System.out.print("+ ");
    } else {
        System.out.print("[ ");
        recursionMystery10(3 * x + 1);
        System.out.print("] ");
    }
}

m(1) -> 1 END

m(4) -> 4 m(2)+
  m(2) -> 2 m(1)+
    m(1) -> 1 END
  m(2) -> 2 1 END+
m(4) -> 4 2 1 END+ +

m(3) -> 3-[-m(10)]-
  m(10) -> 10-m(5)+-
    m(5) -> 5-[-m(16)]-
      m(16) -> 16-m(8)+-
        m(8) -> 8-m(4)+-
          m(4) -> 4 2 1 END+-+-
        m(8) -> 8-4 2 1 END+-+-+-
      m(16) -> 16-8-4 2 1 END+-+-+-+-
    m(5) -> 5-[-16-8-4 2 1 END+-+-+-+-]-
  m(10) -> 10-5-[-16-8-4 2 1 END+-+-+-+-]-+-
m(3) -> 3 [ 10 5 [ 16 8 4 2 1 END+ + + + ] + ] // replace - with whitespace

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery1(int x, int y) {
    if (y <= 0) {
        System.out.print("0 ");
    } else if (x > y) {
        System.out.print(x + " ");
        recursionMystery1(x - y, y);
    } else {
        recursionMystery1(x, y - x);
        System.out.print(y + " ");
    }
}

m(6, 3) -> 6_m(3, 3)
  m(3, 3) -> m(3, 0)3_
    m(3, 0) -> 0_
  m(3, 3) -> 0_3_
m(6, 3) -> 6_0_3_ -> 6 0 3

m(2, 3) -> m(2, 1)3_
  m(2, 1) -> 2_m(1, 1)
    m(1, 1) -> m(1, 0)1_
      m(1, 0) -> 0_
    m(1, 1) -> 0_1_
  m(2, 1) -> 2_0_1_
m(2, 3) -> 2_0_1_3_ -> 2 0 1 3

m(5, 8) -> m(5, 3)8_
  m(5, 3) -> 5_m(2, 3)
    m(2, 3) -> 2_0_1_3_
  m(5, 3) -> 5_2_0_1_3_
m(5, 8) -> 5_2_0_1_3_8_ -> 5 2 0 1 3 8

m(21, 12) -> 21_m(9, 12)
  m(9, 12) -> m(9, 3)12_
    m(9, 3) -> 9_m(6, 3)
      m(6, 3) -> 6_0_3_
    m(9, 3) -> 9_6_0_3_
  m(9, 12) -> 9_6_0_3_12_
m(21, 12) -> 21_9_6_0_3_12_ -> 21 9 6 0 3 12

m(3, 10) -> m(3, 7)10_
  m(3, 7) -> m(3, 4)7_
    m(3, 4) -> m(3, 1)4_
      m(3, 1) -> 3_m(2, 1)
        m(2, 1) -> 2_(1, 1)
          m(1, 1) -> m(1, 0)1_
            m(1, 0) -> 0_
          m(1, 1) -> 0_1_
        m(2, 1) -> 2_0_1_
      m(3, 1) -> 3_2_0_1_
    m(3, 4) -> 3_2_0_1_4_
  m(3, 7) -> 3_2_0_1_4_7_
m(3, 10) -> 3_2_0_1_4_7_10_ -> 3 2 0 1 4 7 10

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery1X(int x, int y) {
    if (y <= 0) {
        System.out.print("0 ");
    } else if (x > y) {
        System.out.print(x + " ");
        recursionMystery1X(x - y, y);
    } else {
        recursionMystery1X(x, y - x);
        System.out.print(y + " ");
        if (y % 3 == 0) {
            recursionMystery1X(x, y - x);
        }
    }
}

f(6, 3) -> 6_f(3, 3)
  f(3, 3) -> f(3, 0)3_f(3, 0)
    f(3, 0) -> 0_
  f(3, 3) -> 0_3_0_
f(6, 3) -> 6_0_3_0_ -> 6 0 3 0

f(2, 3) -> f(2, 1)3_f(2, 1)
  f(2, 1) -> 2_f(1, 1)
    f(1, 1) -> f(1, 0)1_
      f(1, 0) -> 0_
    f(1, 1) -> 0_1_
  f(2, 1) -> 2_0_1_
f(2, 3) -> 2_0_1_3_2_0_1_ -> 2 0 1 3 2 0 1

f(5, 8) -> f(5, 3)8_
  f(5, 3) -> 5_f(2, 3)
    f(2, 3) -> 2_0_1_3_2_0_1_
  f(5, 3) -> 5_2_0_1_3_2_0_1_
f(5, 8) -> 5_2_0_1_3_2_0_1_8_ -> 5 2 0 1 3 2 0 1 8

f(21, 12) -> 21_f(9, 12)
  f(9, 12) -> f(9, 3)12_f(9, 3)
    f(9, 3) -> 9_f(6, 3)
      f(6, 3) -> 6_0_3_0
    f(9, 3) -> 9_6_0_3_0
  f(9, 12) -> 9_6_0_3_0_12_9_6_0_3_0
f(21, 12) -> 21_9_6_0_3_0_12_9_6_0_3_0 -> 21 9 6 0 3 0 12 9 6 0 3 0

f(3, 10) -> f(3, 7)10_
  f(3, 7) -> f(3, 4)7_
    f(3, 4) -> f(3, 1)4_
      f(3, 1) -> 3_f(2, 1)
        f(2, 1) -> 2_(1, 1)
          f(1, 1) -> f(1, 0)1_
            f(1, 0) -> 0_
          f(1, 1) -> 0_1_
        f(2, 1) -> 2_0_1_
      f(3, 1) -> 3_2_0_1_
    f(3, 4) -> 3_2_0_1_4_
  f(3, 7) -> 3_2_0_1_4_7_
f(3, 10) -> 3_2_0_1_4_7_10_ -> 3 2 0 1 4 7 10

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery2(int n) {
    if (n <= 1) {
        System.out.print(": ");
    } else {
        System.out.print((n % 2) + " ");
        recursionMystery2(n / 2);
        System.out.print(n + " ");
    }
}

f(8) -> 0_f(4)8_
  f(4) -> 0_f(2)4_
    f(2) -> 0_f(1)2_
      f(1) -> :_
    f(2) -> 0_:_2_
  f(4) -> 0_0_:_2_4_
f(8) -> 0_0_0_:_2_4_8_ -> 0 0 0 : 2 4 8

f(25) -> 1_f(12)25_
  f(12) -> 0_f(6)12_
    f(6) -> 0_f(3)6_
      f(3) -> 1_f(1)3_
        f(1) -> :_
      f(3) -> 1_:_3_
    f(6) -> 0_1_:_3_6_
  f(12) -> 0_0_1_:_3_6_12_
f(25) -> 1_0_0_1_:_3_6_12_25_ -> 1 0 0 1 : 3 6 12 25

f(46) -> 0 1 1 1 0 : 2 5 11 23 46

██████████████████████████████████████████████████████████████████████████████████████████
public static void recursionMystery2X(int n) {
    System.out.print("( ");
    helper(n);
    System.out.print(") ( ");
    helper(n);
    System.out.print(")");
}

public static void helper(int n) {
    if (n <= 1) {
        System.out.print(n + " = ");
    } else {
        System.out.print((n % 2) + " ");
        helper(n / 2);
        System.out.print(n + " ");
        n = n - 1;
    }
}

f(8) -> (_h(8))_(_h(8))
  h(8) -> 0_h(4)8_; n = 7
    h(4) -> 0_h(2)4_; n = 3
      h(2) -> 0_h(1)2_; n = 1
        h(1) -> 1_=_
      h(2) -> 0_1_=_2_; n = 1
    h(4) -> 0_0_1_=_2_4_; n = 3
  h(8) -> 0_0_0_1_=_2_4_8_; n = 7
f(8) -> (_0_0_0_1_=_2_4_8_)_(_0_0_0_1_=_2_4_8_) -> ( 0 0 0 1 = 2 4 8 ) ( 0 0 0 1 = 2 4 8 )

f(25) -> (_h(25))_(_h(25))
  h(25) -> 1_h(12)25_; n = 24
    h(12) -> 0_h(6)12_; n = 11
      h(6) -> 0_h(3)6_; n = 5
        h(3) -> 1_h(1)3_; n = 2
          h(1) -> 1_=_
        h(3) -> 1_1_=_3_; n = 2
      h(6) -> 0_1_1_=_3_6_; n = 5
    h(12) -> 0_0_1_1_=_3_6_12_; n = 11
  h(25) -> 1_0_0_1_1_=_3_6_12_25_; n = 24
f(25) -> (_1_0_0_1_1_=_3_6_12_25_)_(_1_0_0_1_1_=_3_6_12_25_) -> ( 1 0 0 1 1 = 3 6 12 25 ) ( 1 0 0 1 1 = 3 6 12 25 )

f(46) -> (_h(46))_(_h(46))
  h(46) -> 0_h(23)46_; n = 45
    h(23) -> 1_h(11)23_; n = 22
      h(11) -> 1_h(5)11_; n = 10
        h(5) -> 1_h(2)5_; n = 4
          h(2) -> 0_h(1)2_; n = 1
            h(1) -> 1_=_
          h(2) -> 0_1_=_2_; n = 1
        h(5) -> 1_0_1_=_2_5_; n = 4
      h(11) -> 1_1_0_1_=_2_5_11_; n = 10
    h(23) -> 1_1_1_0_1_=_2_5_11_23_; n = 22
  h(46) -> 0_1_1_1_0_1_=_2_5_11_23_46_; n = 45
f(46) -> (_0_1_1_1_0_1_=_2_5_11_23_46_)_(_0_1_1_1_0_1_=_2_5_11_23_46_) -> ( 0 1 1 1 0 1 = 2 5 11 23 46 ) ( 0 1 1 1 0 1 = 2 5 11 23 46 )

██████████████████████████████████████████████████████████████████████████████████████████

public static int mystery(int n) {
    if (n < 10) {
        return (10 * n) + n;
    } else {
        int a = mystery(n / 10);
        int b = mystery(n % 10);
        return (100 * a) + b;
    }
}

m(348) -> a = m(34); b = m(8); return 100 * a + b;
  m(34) -> a = m(3); b = m(4); return 100 * a + b;
    m(3) -> 10 * 3 + 3 = 33
    m(4) -> 10 * 4 + 4 = 44
  m(34) -> a = 33; b = 44; return 100 * 33 + 44 = 3344;
  m(8) -> 10 * 8 + 8 = 88
m(348) -> a = 3344; b = 88; return 100 * 3344 + 88 = 334488;

██████████████████████████████████████████████████████████████████████████████████████████

public static int recursionMystery3(int n) {
    if (n < 0) {
        return -recursionMystery3(-n);
    } else if (n < 10) {
        return (n + 1) % 10;
    } else {
        return 100 * recursionMystery3(n / 10) + (n + 1) % 10;
    }
}

f(7) -> 8

f(42) -> 100 * f(4) + 43 % 10
  f(4) -> 5
f(42) -> 100 * 5 + 43 % 10 = 500 + 3 = 503

f(385) -> 100 * f(38) + 386 % 10
  f(38) -> 100 * f(3) + 39 % 10
    f(3) -> 4
  f(38) -> 100 * 4 + 39 % 10 = 400 + 9 = 409
f(385) -> 100 * 409 + 386 % 10 = 40900 + 6 = 40906

f(-790) -> -f(790)
  f(790) -> 100 * f(79) + 791 % 10
    f(79) -> 100 * f(7) + 80 % 10
      f(7) -> 8
    f(79) -> 100 * 8 + 80 % 10 = 800 + 0 = 800
  f(790) -> 100 * 800 + 791 % 10 = 80000 + 1 = 80001
f(-790) -> -80001

f(89294) -> 100 * f(8929) + 89295 % 10
  f(8929) -> 100 * f(892) + 8930 % 10
    f(892) -> 100 * f(89) + 893 % 10
      f(89) -> 100 * f(8) + 90 % 10
        f(8) -> 9
      f(89) -> 100 * 9 + 90 % 10 = 900 + 0 = 900
    f(892) -> 100 * 900 + 893 % 10 = 90000 + 3 = 90003
  f(8929) -> 100 * 90003 + 8930 % 10 = 9000300 + 0 = 9000300
f(89294) -> 100 * 9000300 + 89295 % 10 = 900030000 + 5 = 900030005

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery4(int n) {
    if (n <= 1) {
        System.out.print("*");
    } else if (n == 2) {
        recursionMystery4(n - 1);
        System.out.print("*");
    } else {
        System.out.print("(");
        recursionMystery4(n - 2);
        System.out.print(")");
    }
}

f(2) -> f(1)*
  f(1) -> *
f(2) -> **

f(3) -> (f(1))
  f(1) -> *
f(3) -> (*)

f(4) -> (f(2))
  f(2) -> **
f(4) -> (**)

f(6) -> (f(4))
  f(4) -> (**)
f(6) -> ((**))

f(9) -> (f(7))
  f(7) -> (f(5))
    f(5) -> (f(3))
      f(3) -> (*)
    f(5) -> ((*))
  f(7) -> (((*)))
f(9) -> ((((*))))

██████████████████████████████████████████████████████████████████████████████████████████

public static int recursionMystery5(int a, int b) {
    if (a < 10 || b < 10) {
        return a + b;
    } else if (a > b) {
        int x = recursionMystery5(a / 2, b / 2);
        int y = recursionMystery5(b, a - b);
        return x + y;
    } else {
        return recursionMystery5(a, b / 2);
    }
}

f(11, 18) -> f(11, 9)
  f(11, 9) -> 20
f(11, 18) -> 20

f(26, 12) -> x = f(13, 6); y = f(12, 14); return x + y
  f(13, 6) -> 19
  f(12, 14) -> f(12, 7)
    f(12, 7) -> 19
  f(12, 14) -> 19
f(26, 12) -> x = 19; y = 19; 19 + 19 -> 38

f(32, 48) -> f(32, 24)
  f(32, 24) -> x = f(16, 12); y = f(24, 8); return x + y
    f(16, 12) -> x = f(8, 6); y = f(12, 4); return x + y
      f(8, 6) -> 14
      f(12, 4) -> 16
    f(16, 12) -> x = 14; y = 16; return 30
    f(24, 8) -> 32
  f(32, 24) -> x = 30; y = 32; return 62
f(32, 48) -> 62

f(10, 18) -> f(10, 9)
  f(10, 9) -> 19
f(10, 18) -> 19

f(6, 15) -> 21

f(24, 10) -> x = f(12, 5); y = f(10, 14); return x + y
  f(12, 5) -> 17
  f(10, 14) -> f(10, 7)
    f(10, 7) -> 17
  f(10, 14) -> 17
f(24, 10) -> x = 17; y = 17; return 34

f(19, 20) -> f(19, 10)
  f(19, 10) -> x = f(9, 5); y = f(10, 9); return x + y
  f(9, 5) -> 14
  f(10, 9) -> 19
  f(19, 10) -> x = 14; y = 19; return 33
f(19, 20) -> 33

██████████████████████████████████████████████████████████████████████████████████████████

public static int mystery(int n) {
    if (n < 10) {
        return n;
    } else {
        int a = n / 10;
        int b = n % 10;
        return mystery(a + b);
    }
}

f(648) -> a = 64; b = 8; f(72)
  f(72) -> a = 7; b = 2; f(9)
    f(9) -> 9
  f(72) -> a = 7; b = 2; 9
f(648) -> a = 64; b = 8; 9

██████████████████████████████████████████████████████████████████████████████████████████

public static String recursionMystery6(String s) {
    if (s.length() == 0) {
        return s;
    } else if (s.length() % 2 == 0) {
        String rest = s.substring(0, s.length() - 1);
        String last = s.substring(s.length() - 1);
        return last + recursionMystery6(rest);
    } else {
        String first = s.substring(0, 1);
        String rest = s.substring(1);
        return "(" + first + ")" + recursionMystery6(rest);
    }
}

f("hi") -> rest = "h"; last = "i"; return "i" + f("h")
  f("h") -> first = "h"; rest = ""; return "(h)" + f("")
    f("") -> ""
  f("h") -> first = "h"; rest = ""; return "(h)" + "" -> "(h)"
f("hi") -> rest = "h"; last = "i"; return "i" + "(h)" -> "i(h)"

f("quirk") -> first = "q"; rest = "uirk"; return "(q)" + f("uirk")
  f("uirk") -> rest = "uir"; last = "k"; return "k" + f("uir")
    f("uir") -> first = "u"; rest = "ir"; return "(u)" + f("ir")
      f("ir") -> "r(i)"
    f("uir") -> first = "u"; rest = "ir"; return "(u)" + "r(i)" -> "(u)r(i)"
  f("uirk") -> rest = "uir"; last = "k"; return "k" + "(u)i(i)" -> "k(u)r(i)"
f("quirk") -> first = "q"; rest = "uirk"; return "(q)" + "k(u)i(i)" -> "(q)k(u)r(i)"

f("computer") -> "r(c)e(o)t(m)u(p)"

f("foo") -> first = "f"; rest = "oo"; return "(f)" + f("oo")
  f("oo") -> "o(o)"
f("foo") -> first = "f"; rest = "oo"; return "(f)" + "o(o)" -> "(f)o(o)"

f("kakuro") -> "o(k)r(a)u(k)"

f("koopatroopa") -> "(k)a(o)p(o)o(p)o(a)r(t)"

f("01234") ->

f("(1 - 2) = -1)") -> "(())(1)1( )-(-) ( )=(2) ())"

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery7(String s) {
    if (s.length() <= 1) {
        System.out.print(s);
    } else {
        String first = s.substring(0, 1);
        String last  = s.substring(s.length() - 1, s.length());
        String mid   = s.substring(1, s.length() - 1);
        if (first.compareTo(last) < 0) {
            recursionMystery7(mid);
            System.out.print(last + first.toUpperCase());
        } else {
            System.out.print("[" + first + "]");
            recursionMystery7(mid);
            System.out.print(last);
        }
    }
}

f("abcd") -> first = "a"; last = "d"; mid = "bc"; f("bc")dA
  f("bc") -> first = "b"; last = "c"; mid = ""; f("")cB
    f("") -> ""
  f("bc") -> first = "b"; last = "c"; mid = ""; "cB"
f("abcd") -> first = "a"; last = "d"; mid = "bc"; "cBdA"

f("leonard") -> first = "l"; last = "d"; mid = "eonar"; [l]f("eonar")d
  f("eonar") -> first = "e"; last = "r"; mid = "ona"; f("ona")rE
    f("ona") -> first = "o"; last = "a"; mid = "n"; [o]f("n")a
      f("n") -> "n"
    f("ona") -> first = "o"; last = "a"; mid = "n"; [o]na
  f("eonar") -> first = "e"; last = "r"; mid = "ona"; [o]narE
f("leonard") -> first = "l"; last = "d"; mid = "eonar"; [l][o]narEd

f("breakfast") -> first = "b"; last = "t"; mid = "reakfas"; f("reakfas")tB
  f("reakfas") -> first = "r"; last = "s"; mid = "eakfa"; f("eakfa")sR
    f("eakfa") -> first = "e"; last = "a"; mid = "akf"; [e]f("akf")a
      f("akf") -> first = "a"; last = "f"; mid = "k"; f("k")fA
        f("k") -> "k"
      f("akf") -> first = "a"; last = "f"; mid = "k"; kfA
    f("eakfa") -> first = "e"; last = "a"; mid = "akf"; [e]kfAa
  f("reakfas") -> first = "r"; last = "s"; mid = "eakfa"; [e]kfAasR
f("breakfast") -> first = "b"; last = "t"; mid = "reakfas"; [e]kfAasRtB

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMystery8(int n) {
    if (n <= 1) {
        System.out.print(n);
    } else {
        System.out.print(n + " = (");
        recursionMystery8(n / 2 + n % 2);
        System.out.print(", ");
        recursionMystery8(n / 2);
        System.out.print(")");
    }
}

f(3) -> 3_=_(f(2),_f(1))
  f(2) -> 2_=(f(1),_f(1))
    f(1) -> 1
  f(2) -> 2_=_(1,_1)
f(3) -> 3_=_(2_=_(1,_1),_1) -> 3 = (2 = (1, 1), 1)

f(4) -> 4_=_(f(2),_f(2))
     -> 4_=_(2_=_(1,_1),_2_=_(1,_1))
       -> 4 = (2 = (1, 1), 2 = (1, 1))

f(6) -> 6 = (3 = (2 = (1, 1), 1), 3 = (2 = (1, 1), 1))

f(7) -> 7_=_(f(4),_f(3))
     -> 7_=_(4 = (2 = (1, 1), 2 = (1, 1)),_3 = (2 = (1, 1), 1))
       -> 7 = (4 = (2 = (1, 1), 2 = (1, 1)), 3 = (2 = (1, 1), 1))

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMysteryComma(int x, int y) {
    if (y == 1) {
        System.out.print(x);
    } else {
        System.out.print((x * y) + ", ");
        recursionMysteryComma(x, y - 1);
        System.out.print(", " + (x * y));
    }
}

f(4, 1) -> 4

f(4, 2) -> 8,_f(4, 1),_8
  f(4, 1) -> 4
f(4, 2) -> 8,_4,_8 -> 8, 4, 8

f(8, 2) -> 16, f(8, 1), 16
  f(8, 1) -> 8
f(8, 2) -> 16, 8, 16

f(4, 3) -> 12, f(4, 2), 12
  f(4, 2) -> 8, 4, 8
f(4, 3) -> 12, 8, 4, 8, 12

f(3, 4) -> 12, f(3, 3), 12
  f(3, 3) -> 9, f(3, 2), 9
    f(3, 2) -> 6, f(3, 1), 6
      f(3, 1) -> 3
    f(3, 2) -> 6, 3, 6
  f(3, 3) -> 9, 6, 3, 6, 9
f(3, 4) -> 12, 9, 6, 3, 6, 9, 12

██████████████████████████████████████████████████████████████████████████████████████████

public static int recursionMysteryDivMod(int n) {
    if (n < 0) {
        return recursionMysteryDivMod(-n);
    } else if (n < 10) {
        return n;
    } else {
        return n % 10 + recursionMysteryDivMod(n / 10);
    }
}

f(8) -> 8

f(74) -> 4 + f(7)
  f(7) -> 7
f(74) -> 4 + 7 -> 11

f(-513) -> f(513)
  f(513) -> 3 + f(51)
    f(51) -> 1 + f(5)
      f(5) -> 5
    f(51) -> 1 + 5 = 6
  f(513) -> 3 + 6 = 9
f(-513) -> 9

f(3052) -> 10

f(82534) -> 22

██████████████████████████████████████████████████████████████████████████████████████████

public static int recursionMysteryMinus(int x, int y) {
    if (x < y) {
        return x;
    } else {
        return recursionMysteryMinus(x - y, y);
    }
}

f(6, 13) -> 6

f(14, 10) -> f(4, 10)
  f(4, 10) -> 4
f(14, 10) -> 4

f(37, 10) -> 7

f(8, 2) -> 0

f(50, 7) -> 2

██████████████████████████████████████████████████████████████████████████████████████████

public static void recursionMysteryPrintDigits(int x) {
    if (x < 10) {
        System.out.print(x);
    } else {
        int y = x % 10;
        System.out.print(y);
        recursionMysteryPrintDigits(x / 10);
        System.out.print(y);
    }
}

f(7) -> 7

f(38) -> y = 8; "8f(3)8"
  f(3) -> 3
f(38) -> y = 8; "838"

f(194) -> y = 4; "4f(19)4"
  f(19) -> y = 9; "9f(1)9"
    f(1) -> 1
  f(19) -> y = 9; "919"
f(194) -> y = 4; "49194"

f(782) -> "28782"

f(3842) -> "2483842"

██████████████████████████████████████████████████████████████████████████████████████████

function mystery1(n) {
    if (n < 0) {
        return -mystery1(-n);
    } else if (n > 100) {
        return n;
    } else {
        return mystery1(n * 2);
    }
}

f(144) -> 144

f(90) -> f(180)
  f(180) -> 180

f(49) -> f(98)
  f(98) -> f(196)
    f(196) -> 196

f(40) -> 160

f(-10) -> -f(10)
  f(10) -> f(20)
    f(20) -> f(40)
      f(40) -> 160
    ...
  ...
f(-10) -> -160
