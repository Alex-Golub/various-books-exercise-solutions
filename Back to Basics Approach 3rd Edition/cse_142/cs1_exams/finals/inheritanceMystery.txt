██████████ Practice Final 1 (05sp) ██████████
public class A extends B {
    public void method2() { System.out.print("a 2 "); method1(); }
}

public class B extends C {
    public String toString() { return "b"; }
    public void method2() { System.out.print("b 2 "); super.method2(); }
}

public class C {
    public String toString() { return "c"; }
    public void method1() { System.out.print("c 1 "); }
    public void method2() { System.out.print("c 2 "); }
}

public class D extends B {
    public void method1() { System.out.print("d 1 "); method2(); }
}

C[] elements = {new A(), new B(), new C(), new D()};
for (int i = 0; i < elements.length; i++) {
    System.out.println(elements[i]);
    elements[i].method1();
    System.out.println();
    elements[i].method2();
    System.out.println();
    System.out.println();
}

inheritance tree: C > B > A
                  B > D

elements[0]: A  => b
                   c 1
                   a 2 c 1
elements[1]: B  => b
                   c 1
                   b 2 c 2
elements[2]: C  => c
                   c 1
                   c 2
elements[3]: D  => b
                   d 1 b 2 c 2
                   b 2 c 2

██████████ Practice Final 2 (05wi) ██████████
public class Pen extends Sock {
    public void method1() { System.out.print("pen 1  "); }
}

public class Lamp {
    public void method1() { System.out.print("lamp 1  "); }
    public void method2() { System.out.print("lamp 2  "); }
    public String toString() { return "lamp"; }
}

public class Book extends Sock {
    public void method2() { System.out.print("book 2  "); super.method2(); }
}

public class Sock extends Lamp {
    public void method1() { System.out.print("sock 1  "); method2(); }
    public String toString() { return "sock"; }
}

Lamp[] elements = {new Book(), new Pen(), new Lamp(), new Sock()};
for (int i = 0; i < elements.length; i++) {
    System.out.println(elements[i]);
    elements[i].method1();
    System.out.println();
    elements[i].method2();
    System.out.println();
    System.out.println();
}

elements[0]: Book => sock
                     sock 1  book 2  lamp 2
                     book 2  lamp 2
elements[1]: Pen  => sock
                     pen 1
                     lamp 2
elements[2]: Lamp => lamp
                     lamp 1
                     lamp 2
elements[3]: Sock => sock
                     sock 1  lamp 2
                     lamp 2


██████████ Practice Final 3 (07au) ██████████
public class Vier extends Drei {
    public void method2() { super.method2(); System.out.print("Vier 2   "); }
    public String toString() { return "Vier " + super.toString(); }
}

public class Zwei extends Eins {
    public void method2() { System.out.print("Zwei 2   "); method1(); }
}

public class Drei extends Zwei {
    public void method1() { System.out.print("Drei 1   "); }
    public String toString() { return "Drei"; }
}

public class Eins {
    public String toString() { return "Eins"; }
    public void method1() { System.out.print("Eins 1   "); }
    public void method2() { System.out.print("Eins 2   "); }
}

Eins[] elements = {new Zwei(), new Eins(), new Vier(), new Drei()};
for (int i = 0; i < elements.length; i++) {
    System.out.println(elements[i]);
    elements[i].method1();
    System.out.println();
    elements[i].method2();
    System.out.println();
    System.out.println();
}

elements[0]: Zwei => Eins
                     Eins 1
                     Zwei 2   Eins 1
elements[1]: Eins => Eins
                     Eins 1
                     Eins 2
elements[2]: Vier => Vier Drei
                     Drei 1
                     Zwei 2   Drei 1   Vier 2
elements[3]: Drei => Drei
                     Drei 1
                     Zwei 2   Drei 1


██████████ Practice Final 4 (08wi) ██████████
public class Brian extends Lois {
    public void b() { a(); System.out.print("Brian b   "); }
    public String toString() { return "Brian"; }
}

public class Lois extends Meg {
    public void a() { System.out.print("Lois a   "); super.a(); }
    public void b() { System.out.print("Lois b   "); }
}

public class Meg {
    public void a() { System.out.print("Meg a   "); }
    public void b() { System.out.print("Meg b   "); }
    public String toString() { return "Meg"; }
}

public class Stewie extends Brian {
    public void a() { super.a(); System.out.print("Stewie a   "); }
    public String toString() { return super.toString() + " Stewie"; }
}

Meg[] elements = {new Lois(), new Stewie(), new Meg(), new Brian()};
for (int i = 0; i < elements.length; i++) {
    elements[i].a();
    System.out.println();
    elements[i].b();
    System.out.println();
    System.out.println(elements[i]);
    System.out.println();
}

elements[0]: Lois    => Lois a   Meg a
                        Lois b
                        Meg
elements[1]: Stewie  => Lois a   Meg a   Stewie a
                        Lois a   Meg a   Stewie a   Brian b
                        Brian Stewie
elements[2]: Meg     => Meg a
                        Meg b
                        Meg
elements[3]: Brian   => Lois a   Meg a
                        Lois a   Meg a   Brian b
                        Brian


██████████ Practice Final 5 (06au) ██████████
public class Ice extends Fire {
    public void method1() { System.out.print("Ice 1 "); }
}

public class Rain extends Fire {
    public String toString() { return "Rain"; }
    public void method1() { super.method1(); System.out.print("Rain 1 "); }
}

public class Fire {
    public String toString() { return "Fire"; }
    public void method1() { method2(); System.out.print("Fire 1 "); }
    public void method2() { System.out.print("Fire 2 "); }
}

public class Snow extends Rain {
    public void method2() { System.out.print("Snow 2 "); }
}

Fire[] elements = {new Fire(), new Snow(), new Rain(), new Ice()};
for (int i = 0; i < elements.length; i++) {
    System.out.println(elements[i]);
    elements[i].method1();
    System.out.println();
    elements[i].method2();
    System.out.println();
    System.out.println();
}

elements[0]: Fire => Fire
                     Fire 2 Fire 1
                     Fire 2
elements[1]: Snow => Rain
                     Snow 2 Fire 1 Rain 1
                     Snow 2
elements[2]: Rain => Rain
                     Fire 2 Fire 1 Rain 1
                     Fire 2
elements[3]: Ice  => Fire
                     Ice 1
                     Fire 2


██████████ Practice Final 6 (08su) ██████████
public class Dog extends Cat {
    public void m1() { m2(); System.out.print("dog 1   "); }
}

public class Lion extends Dog {
    public void m2() { System.out.print("lion 2   "); super.m2(); }
    public String toString() { return "lion"; }
}

public class Cat {
    public String toString() { return "cat"; }
    public void m1() { System.out.print("cat 1   "); }
    public void m2() { System.out.print("cat 2   "); }
}

Cat[] elements = {new Dog(), new Cat(), new Lion()};
for (int i = 0; i < elements.length; i++) {
    elements[i].m1();
    System.out.println();
    elements[i].m2();
    System.out.println();
    System.out.println(elements[i]);
    System.out.println();
}

elements[0]: Dog  => cat 2   dog 1
                     cat 2
                     cat
elements[1]: Cat  => cat 1
                     cat 2
                     cat
elements[2]: Lion => lion 2   cat 2   dog 1
                     lion 2   cat 2
                     lion


██████████ Practice Final 7 (08au) ██████████
public class McCain extends Biden {
    public void republican() { System.out.print("mccain-R   "); }
}

public class Palin {
    public void republican() { System.out.print("palin-R   "); }
    public void democrat() { republican(); System.out.print("palin-D   "); }
    public String toString() { return "palin"; }
}

public class Obama extends Palin {
    public void republican() { super.republican(); System.out.print("obama-R   "); }
}

public class Biden extends Palin {
    public String toString() { return "biden"; }
    public void democrat() { System.out.print("biden-D   "); super.democrat(); }
}

Palin[] politicians = {new Biden(), new Palin(), new McCain(), new Obama()};
for (int i = 0; i < politicians.length; i++) {
    System.out.println(politicians[i]);
    politicians[i].republican();
    System.out.println();
    politicians[i].democrat();
    System.out.println();
    System.out.println();
}

elements[0]: Biden  => biden
                       palin-R
                       biden-D   palin-R   palin-D
elements[1]: Palin  => palin
                       palin-R
                       palin-R   palin-D
elements[2]: McCain => biden
                       mccain-R
                       biden-D   mccain-R   palin-D
elements[3]: Obama  => palin
                       palin-R   obama-R
                       palin-R   obama-R   palin-D


██████████ Practice Final 8 (09su) ██████████
public class Denny extends John {
    public void method1() { System.out.print("denny 1 "); }
    public String toString() { return "denny " + super.toString(); }
}
public class Cass {
    public void method1() { System.out.print("cass 1 "); }
    public void method2() { System.out.print("cass 2 "); }
    public String toString() { return "cass"; }
}
public class Michelle extends John {
    public void method1() { System.out.print("michelle 1 "); }
}
public class John extends Cass {
    public void method2() { method1(); System.out.print("john 2 "); }
    public String toString() { return "john"; }
}

Cass[] elements = {new Cass(), new Denny(), new John(), new Michelle()};
for (int i = 0; i < elements.length; i++) {
    elements[i].method1();
    System.out.println();
    elements[i].method2();
    System.out.println();
    System.out.println(elements[i]);
    System.out.println();
}

elements[0] : Cass      => cass 1
                           cass 2
                           cass
elements[1] : Denny     => denny 1
                           denny 1 john 2
                           denny john
elements[2] : John      => cass 1
                           cass 1 john 2
                           john
elements[3] : Michelle  => michelle 1
                           michelle 1 john 2
                           john


██████████ Practice Final 9 (09au) ██████████
public class Biggie extends JayZ {
    public void a() { System.out.print("Biggie a   "); super.a(); }
    public String toString() { return "Biggie"; }
}

public class JayZ extends Tupac {
    public void a() { System.out.print("JayZ a   "); b(); }
}

public class FiftyCent extends Biggie {
    public void b() { System.out.print("FiftyCent b   "); }
}
public class Tupac {
    public void a() { System.out.print("Tupac a   "); }
    public void b() { System.out.print("Tupac b   "); }
    public String toString() { return "Tupac"; }
}

Tupac[] elements = {new Biggie(), new Tupac(), new JayZ(), new FiftyCent()};
for (int i = 0; i < elements.length; i++) {
    elements[i].a();
    System.out.println();
    elements[i].b();
    System.out.println();
    System.out.println(elements[i]);
    System.out.println();
}

elements[0]: Biggie    => Biggie a   JayZ a   Tupac b
                          Tupac b
                          Biggie
elements[1]: Tupac     => Tupac a
                          Tupac b
                          Tupac
elements[2]: JayZ      => JayZ a   Tupac b
                          Tupac b
                          Tupac
elements[3]: FiftyCent => Biggie a   JayZ a   FiftyCent b
                          FiftyCent b
                          Biggie


██████████ Practice Final 10 (10sp) ██████████
public class Leela extends Fry {
    public void method1() { System.out.print("Leela1 "); }
    public void method2() { System.out.print("Leela2 "); super.method2(); }
}

public class Farnsworth extends Bender {
    public void method1() { System.out.print("Farnsworth1 "); }
    public String toString() { return "Good news everyone!"; }
}

public class Fry extends Bender {
    public void method2() { System.out.print("Fry2 "); super.method2(); }
}

public class Bender {
    public void method1() { System.out.print("Bender1 "); }
    public void method2() { System.out.print("Bender2 "); method1(); }
    public String toString() { return "We're doomed!"; }
}

Bender[] rodriguez = { new Leela(), new Bender(), new Farnsworth(), new Fry() };
for (int i = 0; i < rodriguez.length; i++) {
    rodriguez[i].method2();
    System.out.println();
    System.out.println(rodriguez[i]);
    rodriguez[i].method1();
    System.out.println();
    System.out.println();
}

elements[0]: Leela      => Leela2 Fry2 Bender2 Leela1
                           We're doomed!
                           Leela1
elements[1]: Bender     => Bender2 Bender1
                           We're doomed!
                           Bender1
elements[2]: Farnsworth => Bender2 Farnsworth1
                           Good news everyone!
                           Farnsworth1
elements[3]: Fry        => Fry2 Bender2 Bender1
                           We're doomed!
                           Bender1


██████████ Practice Final 11 (10su) ██████████
public class Sawyer extends Jack {
    public void follow() { System.out.print("sawyer-F   "); super.follow(); }
}

public class Kate {
    public void lead() { System.out.print("kate-L   "); }
    public void follow() { System.out.print("kate-F   "); }
    public String toString() { return "kate"; }
}
public class Jack extends Locke {
    public void lead() { super.lead(); System.out.print("jack-L   "); }
    public String toString() { return "jack"; }
}

public class Locke extends Kate {
    public void follow() { lead(); System.out.print("locke-F   ");
    }
}

Kate[] characters = {new Locke(), new Jack(), new Sawyer(), new Kate()};
for (int i = 0; i < characters.length; i++) {
    System.out.println(characters[i]);
    characters[i].lead();
    System.out.println();
    characters[i].follow();
    System.out.println();
    System.out.println();
}

elements[0]: Locke  => kate
                       kate-L
                       kate-L   locke-F
elements[1]: Jack   => jack
                       kate-L   jack-L
                       kate-L   jack-L   locke-F
elements[2]: Sawyer => jack
                       kate-L   jack-L
                       sawyer-F   kate-L   jack-L   locke-F
elements[3]: Kate   => kate
                       kate-L
                       kate-F


██████████ Practice Final 12 (10au) ██████████
public class HeMan extends Skeletor {
    public void attack() { super.attack(); System.out.print("heman-A   "); }
    public String toString() { return "heman!"; }
}

public class SheRa {
    public void attack() { System.out.print("shera-A   "); }
    public void train() { System.out.print("shera-T   "); }
    public String toString() { return "shera!"; }
}

public class BattleCat extends HeMan {
    public void attack() { System.out.print("battlecat-A   "); }
    public void train() { attack(); System.out.print("battlecat-T   "); }
}

public class Skeletor extends SheRa {
    public void train() { System.out.print("skeletor-T   "); attack(); }
}

SheRa[] superheros = { new Skeletor(), new HeMan(), new SheRa(), new BattleCat() };
for (int i = 0; i < superheros.length; i++) {
    superheros[i].train();
    System.out.println();
    superheros[i].attack();
    System.out.println();
    System.out.println(superheros[i]);
    System.out.println();
}

elements[0]: Skeletor  => skeletor-T   shera-A
                          shera-A
                          shera!
elements[1]: HeMan     => skeletor-T   shera-A   heman-A
                          shera-A   heman-A
                          heman!
elements[2]: SheRa     => shera-T
                          shera-A
                          shera!
elements[3]: BattleCat => battlecat-A   battlecat-T
                          battlecat-A
                          heman!


██████████ Practice Final 13 (11au) ██████████
public class Tulip extends Rose {
    public void method1() { System.out.print("Tulip 1 "); }
}

public class Violet {
    public void method1() { System.out.print("Violet 1 "); }
    public void method2() { System.out.print("Violet 2 "); }
    public String toString() { return "Violet"; }
}

public class Rose extends Lily {
    public String toString() { return "Rose " + super.toString(); }
}

public class Lily extends Violet {
    public void method1() { super.method1(); System.out.print("Lily 1 "); }
    public void method2() { System.out.print("Lily 2 "); method1(); }
    public String toString() { return "Lily"; }
}

Violet[] pretty = { new Tulip(), new Lily(), new Violet(), new Rose() };
for (int i = 0; i < pretty.length; i++) {
    System.out.println(pretty[i]);
    pretty[i].method1();
    System.out.println();
    pretty[i].method2();
    System.out.println();
    System.out.println();
}

elements[0]: Tulip  => Rose Lily
                       Tulip 1
                       Lily 2 Tulip 1
elements[1]: Lily   => Lily
                       Violet 1 Lily 1
                       Lily 2 Violet 1 Lily 1
elements[2]: Violet => Violet
                       Violet 1
                       Violet 2
elements[3]: Rose   => Rose Lily
                       Violet 1 Lily 1
                       Lily 2 Violet 1 Lily 1